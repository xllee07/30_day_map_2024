qtm(det)
leg2 <- hike %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
tmap_mode('view')
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
hike <- hikepoints %>% arrange(id) %>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-2) #drop last row because there are no further destinations
origins= hike %>% select(id)
destinations <- hike %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
qtm(destinations)
# routing inputs
mode <- c('walk')
mode2 <- c('car')
departure_datetime <- as.POSIXct("28-11-2021 08:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
mode2 <- c('walk','transit')
tmap_mode('view')
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
hike <- hikepoints %>% arrange(id) %>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-2) #drop last row because there are no further destinations
origins= hike %>% select(id)
destinations <- hike %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
qtm(destinations)
# routing inputs
mode <- c('walk')
mode2 <- c('walk','transit')
departure_datetime <- as.POSIXct("28-11-2021 08:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
View(det2)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 10,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 10,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
tmap_mode('view')
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
hike <- hikepoints %>% arrange(id) %>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-2) #drop last row because there are no further destinations
origins= hike %>% select(id)
destinations <- hike %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
qtm(destinations)
# routing inputs
mode <- c('walk')
mode2 <- c('walk','transit')
departure_datetime <- as.POSIXct("28-11-2021 08:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 10,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
mode2 <- c('walk','subway')
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 10,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
mode2 <- c('walk','subway','rail')
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = T,
)
st_crs(destinations)=st_crs(origins)
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det2)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = F,
)
qtm(det2)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 2000,
suboptimal_minutes = 0,
shortest_path = F,
)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 2000,
suboptimal_minutes = 0,
shortest_path = F,
)
qtm(det2)
r5r_core <- setup_r5(data_path = "C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data", verbose = FALSE)
library(r5r)
options(java.parameters = "-Xmx2G")
# 1) build transport network, pointing to the path where OSM and GTFS data are stored
library(r5r)
path <- system.file("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/london.osm.pbf", package = "r5r")
r5r_core <- setup_r5(data_path = "C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data", verbose = FALSE)
tmap_mode('view')
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
hike <- hikepoints %>% arrange(id) %>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-2) #drop last row because there are no further destinations
origins= hike %>% select(id)
destinations <- hike %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
qtm(destinations)
# routing inputs
mode <- c('walk')
mode2 <- c('walk','subway','rail')
departure_datetime <- as.POSIXct("28-11-2021 08:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 2000,
suboptimal_minutes = 0,
shortest_path = F,
)
qtm(det2)
View(det2)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = F,
)
qtm(det2)
tmap_mode('view')
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
hike <- hikepoints %>% arrange(id) %>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-2) #drop last row because there are no further destinations
origins= hike %>% select(id)
destinations <- hike %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
qtm(destinations)
# routing inputs
mode <- c('walk')
mode2 <- c('walk','subway','rail')
departure_datetime <- as.POSIXct("09-09-2021 08:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = F,
)
qtm(det2)
tmap_mode('view')
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
hike <- hikepoints %>% arrange(id) %>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-2) #drop last row because there are no further destinations
origins= hike %>% select(id)
destinations <- hike %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
qtm(destinations)
# routing inputs
mode <- c('walk')
mode2 <- c('walk','subway','rail')
departure_datetime <- as.POSIXct("09-11-2021 08:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = F,
)
qtm(det2)
departure_datetime <- as.POSIXct("27-11-2021 08:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = F,
)
departure_datetime <- as.POSIXct("27-11-2021 12:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
tmap_mode('view')
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
hike <- hikepoints %>% arrange(id) %>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-2) #drop last row because there are no further destinations
origins= hike %>% select(id)
destinations <- hike %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
qtm(destinations)
# routing inputs
mode <- c('walk')
mode2 <- c('walk','subway','rail',)
tmap_mode('view')
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
hike <- hikepoints %>% arrange(id) %>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-2) #drop last row because there are no further destinations
origins= hike %>% select(id)
destinations <- hike %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
qtm(destinations)
# routing inputs
mode <- c('walk')
mode2 <- c('walk','subway','rail')
departure_datetime <- as.POSIXct("27-11-2021 12:00:00",
format = "%d-%m-%Y %H:%M:%S")
max_walk_time <- 100000
det <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
departure_datetime = departure_datetime,
max_walk_time = max_walk_time,
suboptimal_minutes = 0,
shortest_path = T,
)
qtm(det)
leg2 <- hikepoints %>% filter(id%in%c('1','8')) %>% arrange(desc(id)) %>% mutate(id=row_number())%>%  mutate(o_lon = sf::st_coordinates(.)[,1],#turn the geometry of encoded into lat lon (this is your origins )
o_lat = sf::st_coordinates(.)[,2]) %>%
mutate(d_lon=lead(o_lon),#lead the origins to obtain corresponding destination pair
d_lat=lead(o_lat)) %>% head(-1) #drop last row because there are no further destinations
origins= leg2 %>% select(id)
destinations <- leg2 %>% select(id,d_lat,d_lon) %>% st_drop_geometry() %>% st_as_sf(coords = c("d_lon", "d_lat"))
st_crs(destinations)=st_crs(origins)
det2 <- detailed_itineraries(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode2,
departure_datetime = departure_datetime,
max_walk_time = 20,
suboptimal_minutes = 0,
shortest_path = F,
)
qtm(det2)
qtm(leg2)
qtm(hike,col=id)
hikepoints <- st_read("C:/Users/xianl/OneDrive - PennO365/Datasets/30 map challenge/Data/greenwich-hike.geojson") #point geojson with id representing each location visited
qtm(hike,col=id)
